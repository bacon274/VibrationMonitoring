[agent]
## Default data collection interval for all inputs
interval = "3s"
collection_jitter = "2s"

flush_interval = "5s"
flush_jitter = "2s"

omit_hostname = true

[[inputs.mqtt_consumer]]
servers = ["tcp://mqtt.docker.local:1883"]
topics = ["vibration_monitoring/#"]
data_format = "json_v2"
topic_tag = ""
qos = 1

	[[inputs.mqtt_consumer.json_v2]]
		measurement_name = "vibration_reading"
		timestamp_path = "timestamp"
		timestamp_format = "2006-01-02T15:04:05.999-07:00"

		[[inputs.mqtt_consumer.json_v2.field]]
			path = "acceleration" # A string with valid GJSON path syntax
			type = "float"

		[[inputs.mqtt_consumer.json_v2.field]]
			path = "peakFrequency" # A string with valid GJSON path syntax
			type = "float"
		[[inputs.mqtt_consumer.json_v2.tag]]
			path = "id" # A string with valid GJSON path syntax
			type = "string"

[[inputs.mqtt_consumer]]
servers = ["tcp://mqtt.docker.local:1883"]
topics = ["vibration_monitoring/#"]
data_format = "json_v2"
topic_tag = ""
qos = 1

	[[inputs.mqtt_consumer.json_v2]]
		measurement_name = "fft"
		timestamp_path = "timestamp"
		timestamp_format = "2006-01-02T15:04:05.999-07:00"

		[[inputs.mqtt_consumer.json_v2.object]]
			path = "fft"
			json_value_fields = ["magnitude"]
			tags = ["frequency"]

	
	# [[inputs.mqtt_consumer.json_v2]]
	# 	measurement_name = "vibration_reading"
	# 	[[inputs.mqtt_consumer.json_v2.object]]
	# 		path = "data.@this"
	# 		timestamp_key = "timestamp"
	# 		timestamp_format = "unix_ms"
	# 		included_keys = ["v"]
			# json_value_fields = ["v"]
			# timestamp_path = "timestamp"
			# json_time_key = "timestamp"
			# json_time_format = "unix_ms"
			# timestamp_format = "unix_ms"
			
	
	
	


[[outputs.influxdb_v2]]	
  urls = ["http://timeseries-db.docker.local:8086"]
 
  ## Token for authentication.
  token = "$DOCKER_CURRENT_INFLUXDB_TOKEN"
  
  ## Organization is the name of the organization you wish to write to; must exist.
  organization = "$DOCKER_INFLUXDB_ORG"
  
  ## Destination bucket to write into.
  bucket = "$DOCKER_INFLUXDB_BUCKET"

[[outputs.file]]
  files = ["stdout"]
